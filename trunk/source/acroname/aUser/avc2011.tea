/* ************************************************************************** */
/* Filename: avc2011.tea */

/* ************************************************************************** */
/* LIBRARIES AND MACROS */
#include "avc2011Defs.tea"
#include <aCore.tea>
#include <aPrint.tea>
#include <aMulti.tea>
#include <aPad.tea>
#include <aBus.tea>
#include <aDig.tea>

/* ************************************************************************** */
void aPrint_Debug(string s)
{
	#ifdef aDEBUG	
		aPrint_String(s);
		aPrint_Char('\n');
		aCore_Sleep(1000);
	#endif
}

/* ************************************************************************** */
/* Launches a persisting process. */
void aMoto_Multi_Spawn(char fileID, char ProcID)
{
  asm
  {
    /* run fileID in VM[ProcID] with calling ProcID as input */
    pushlb	aMOTO_MODULE	/* address of Moto */
    pushlb	5
    pushlb	cmdVM_RUN
    pushlb	7		/* RUNCTRL */
    pushsb	8		/* FileID */
    pushsb	8		/* ProcID */
    pushmb	aPortProcID	/* calling ProcID */
    pushlb	7
    popcmd
    pushlb	20		/* let process start */
    popbm	aPortVMTimer
  }
}

/* Kills an active process. */
void aMoto_Multi_Kill(char ProcID)
{
  asm
  {
    pushlb	aMOTO_MODULE	/* address of Moto */
    pushlb	2
    pushlb	cmdVM_KILL
    pushsb	6		/* ProcID */
    pushlb	4
    popcmd
  }
}

/* ************************************************************************** */
/* on entry, the stack looks like this:
 *  0    5    cModule
 *  1    4    fileID
 *  2    3    ProcID
 *  3    2    retaddrh
 *  4    1    retaddrl
 */
void aBus_Multi_Spawn(char cModule, char fileID, char ProcID)
{
  asm
  {
    /* run fileID in VM[ProcID] with calling ProcID as input */
    pushsb  5            /* the module */
    pushlb	5            /* the number of bytes in the command */
    pushlb	cmdVM_RUN
    pushlb	7            /* RUNCTRL */
    pushsb	8            /* FileID, was 8 */
    pushsb	8            /* ProcID, was 8 */
    pushmb	aPortProcID  /* calling ProcID, was aPortProcID */
    pushlb	7            /* We are sending 7 bytes to the popcmd */
    popcmd
    pushlb	20           /* let process start */
    popbm	aPortVMTimer
  }
}

/* ************************************************************************** */
/* on entry, the stack looks like this:
 *  0    4    cModule
 *  1    3    ProcID
 *  2    2    retaddrh
 *  3    1    retaddrl
 */
void aBus_Multi_Kill(char cModule, char ProcID)
{
#ifdef aDEBUG	
	aPrint_String("  WARNING: aBus_Multi_Kill NOT IMPLEMENTED.\n");
	aCore_Sleep(5000);
#endif
}

