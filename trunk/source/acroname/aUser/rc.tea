#include "avc2012.tea"

#include <aServo.tea>


int read_throtRC() { 
  int val=0; 
    asm { 
      /* configure digital IO pin as */ 
      /* pulse width timer for high pulse input */ 
      pushlb 25 
      popbm aPortDigital+ DIG_THROT*aPortDigitalBlockSize+ aOffsetDigitalConfig 
      /* take pulse measurement */ 
      pushms aPortDigital+ DIG_THROT*aPortDigitalBlockSize+ aOffsetDigitalPTime 
      popss 2 
     } 
   return val; 
} 

/* ************************************************************************** */
int read_steerRC() { 
  int val=0; 
  asm { 
    /* configure digital IO pin as */ 
    /* pulse width timer for high pulse input */ 
    pushlb 25 
    popbm aPortDigital+ DIG_STEER*aPortDigitalBlockSize+ aOffsetDigitalConfig 
    /* take pulse measurement */ 
    pushms aPortDigital+ DIG_STEER*aPortDigitalBlockSize+ aOffsetDigitalPTime 
    popss 2 
  } 
  return val; 
}

/* ************************************************************************** */
int read_RCEnable() { 
  int val=0; 
  asm { 
    /* configure digital IO pin as */ 
    /* pulse width timer for high pulse input */ 
    pushlb 25 
    popbm aPortDigital+ DIG_RCENABLE*aPortDigitalBlockSize+ aOffsetDigitalConfig 
    /* take pulse measurement */ 
    pushms aPortDigital+ DIG_RCENABLE*aPortDigitalBlockSize+ aOffsetDigitalPTime 
    popss 2 
  } 
  return val; 
}

/* ************************************************************************** */
char RCEnabled() { 
  int val=0; 
  val = read_RCEnable();
	if(val > 944)
		return 1;
	return 0; 
}

/* ************************************************************************** */
int rcWindow(int value) {
	int result = 0;
	int db = 0;
	
	// Neutral servo count should be off set to 0.
	result = (value - MIN_DUTY) / SERVO_DIV;
	
	// Put a bird, errr, a cap on it.
	if (result < SERVO_MIN)
		result = SERVO_MIN;
	
	if (result > SERVO_MAX)
		result = SERVO_MAX;
	  
	db = result - SERVO_NEUT;
	if(db < 0)
	    db = -db;
	    
	if (db < SERVO_DEADBAND)
	  result = SERVO_NEUT;
	
	return result;

}